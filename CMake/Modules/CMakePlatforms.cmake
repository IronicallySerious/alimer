cmake_minimum_required(VERSION 3.5)

if( _PLATFORMS_GUARD )
	return()
endif()
set(_PLATFORMS_GUARD 1)

# Set platform variables
if ( "${CMAKE_SYSTEM_NAME}" STREQUAL "Windows" )
	set (PLATFORM_WINDOWS ON)
	set (PLATFORM_NAME "Windows")
elseif ( "${CMAKE_SYSTEM_NAME}" STREQUAL "WindowsStore" )
	set (PLATFORM_UWP ON)
	set (PLATFORM_NAME "UWP")
	set (PLATFORM_UWP_VERSION 10.0.16299.0)
	set (PLATFORM_UWP_VERSION_MIN 10.0.14393.0)
elseif( "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin" )
	if( IOS )
		set (PLATFORM_IOS ON)
		set (PLATFORM_NAME "iOS")
	else()
		set (PLATFORM_OSX ON)
		set (PLATFORM_NAME "macOS")
	endif()
elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
	set (PLATFORM_LINUX ON)
	set (PLATFORM_NAME "Linux")
elseif( "${CMAKE_SYSTEM_NAME}" STREQUAL "Android" )
	set (PLATFORM_ANDROID ON)
	set (PLATFORM_NAME "Android")
elseif( "${CMAKE_SYSTEM_NAME}" STREQUAL "Emscripten" )
	set (PLATFORM_WEB ON)
	set (PLATFORM_NAME "Web")
else()
	message(FATAL_ERROR "Unknown platform ${CMAKE_SYSTEM_NAME}!")
endif ()

if (PLATFORM_WINDOWS OR PLATFORM_LINUX OR PLATFORM_OSX)
	set (PLATFORM_DESKTOP ON)
endif ()

if (PLATFORM_ANDROID OR PLATFORM_IOS)
	set (PLATFORM_MOBILE ON)
endif ()

# Detect target architecture
if( ((PLATFORM_WINDOWS OR PLATFORM_OSX OR PLATFORM_UWP) AND CMAKE_CL_64) OR (PLATFORM_IOS AND CMAKE_OSX_ARCHITECTURES MATCHES "arm64") OR PLATFORM_LINUX )
	set(PLATFORM_64BIT 1)
endif()

if (NOT DEFINED PLATFORM_64BIT)
	if (CMAKE_SIZEOF_VOID_P MATCHES 8)
		set(PLATFORM_64BIT ON)
	else ()
		set(PLATFORM_64BIT OFF)
	endif ()
endif ()

if( PLATFORM_WINDOWS OR PLATFORM_OSX OR PLATFORM_LINUX OR PLATFORM_WEB OR PLATFORM_UWP )
	if( PLATFORM_64BIT )
		set(ARCH_NAME "x64")
	else()
		set(ARCH_NAME "x86")
	endif()
elseif( PLATFORM_IOS OR PLATFORM_ANDROID )
	if( PLATFORM_64BIT )
		set(ARCH_NAME "arm64")
	else()
		set(ARCH_NAME "arm")
	endif()
else()
	message(FATAL_ERROR "Unknown platform architecture!")
endif()

message(STATUS "Detected platform: ${PLATFORM_NAME}")
message(STATUS "Detected architecture: ${ARCH_NAME}")


set(LIB_PREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})
set(LIB_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})

# Configure CMake global variables
set(CMAKE_INSTALL_MESSAGE LAZY)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
if( PLATFORM_WINDOWS )
	set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
endif()
